/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2506                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters   1;

// Geometric parameters
rInner  0.5;
rOuter  3;
xnear   5;      // > rOuter
ynear   5;      // > rOuter
rInlet  12;



xmax    24;
xmin    -100;
ymax    12;
ymin    -12;

zmin    0;  // Back/front locations
zmax    1;

theta   45; 

// Divisions: Radial, quarter circumference, outer region and z-directions.
nRadial     28;
nTangent    40;
nInlet      16;
nxNear      20;
nxFar      120;
nyNear      $nTangent;
nyFar       $nInlet;
nz          1;

// Grading
gOuterTop   2;
gOuterBot   #calc "1.0 / $gOuterTop";
gInner      1.5;
gFarTop     4;
gFarBot     #calc "1.0 / $gFarTop";
gxNear      1.5;

// ----------------

// Derived quantities
xTransArc    #calc "$xnear * 0.5";
yTransArc    #calc "($ynear -$rOuter) * 0.75 + $rOuter";



vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(21);
        
        //first quadrant
        points[0] = point($rInner,0,$zmin);
        points[1] = point($rOuter,0,$zmin);
        points[2] = point($xnear,0 ,$zmin);
        points[3] = point($xmax,0, $zmin);
        points[4] = point($xmax, $ynear, $zmin);
        points[5] = point($xnear, $ynear, $zmin);
        points[6] = point(0, $rOuter, $zmin);
        points[7] = point(0, $rInner, $zmin);
        points[8] = point($xmax, $ymax, $zmin);
        points[9] = point($xnear, $ymax, $zmin);
        points[10] = point(0, $ymax, $zmin);
        points[11] = point(-$rInlet ,0, $zmin);
        points[12] = point(0, $ymin, $zmin);
        points[13] = point($xnear, $ymin, $zmin);
        points[14] = point($xmax, $ymin, $zmin);
        points[15] = point($xmax, -$ynear, $zmin);
        points[16] = point($xnear, -$ynear, $zmin);
        points[17] = point(0, -$rOuter, $zmin);
        points[18] = point(0, -$rInner, $zmin);
        points[19] = point(-$rInner, 0, $zmin);
        points[20] = point(-$rOuter, 0, $zmin);

   


        // Duplicate z points for zmax
        label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $zmax);
        }

        os  << points;
    #};
};


blocks
(
    hex (0 1 6 7 21 22 27 28)       ($nRadial  $nTangent $nz) simpleGrading ($gInner 1 1)   // 0
    hex (1 2 5 6 22 23 26 27)       ($nxNear $nyNear $nz)     simpleGrading ($gxNear 1 1)   // 1
    hex (2 3 4 5 23 24 25 26)       ($nxFar $nyNear $nz)      simpleGrading (1 1 1)   // 2
    hex (5 4 8 9 26 25 29 30)       ($nxFar $nyFar $nz)       simpleGrading (1 $gOuterTop 1)   // 3
    hex (6 5 9 10 27 26 30 31)      ($nxNear $nyFar $nz)      simpleGrading ($gxNear $gOuterTop 1)   // 4
    hex (6 10 11 20 27 31 32 41)    ($nInlet $nTangent $nz)  simpleGrading ($gOuterTop 1 1)   // 5
    hex (20 11 12 17 41 32 33 38)   ($nInlet $nTangent $nz)  simpleGrading ($gOuterTop 1 1)   // 6
    hex (12 13 16 17 33 34 37 38)   ($nxNear $nyFar $nz)      simpleGrading ($gxNear $gOuterBot 1)  // 7
    hex (13 14 15 16 34 35 36 37)   ($nxFar $nyFar $nz)       simpleGrading (1 $gOuterBot 1)  // 8
    hex (16 15 3 2 37 36 24 23)     ($nxFar $nyNear $nz)      simpleGrading (1 1 1)   // 9
    hex (17 16 2 1 38 37 23 22)     ($nxNear $nyNear $nz)     simpleGrading ($gxNear 1 1)  // 10
    hex (18 17 1 0 39 38 22 21)     ($nRadial $nTangent $nz)  simpleGrading ($gInner 1 1)   // 11
    hex (19 20 17 18 40 41 38 39)   ($nRadial $nTangent $nz)  simpleGrading ($gInner 1 1)   // 12
    hex (7 6 20 19 28 27 41 40)     ($nRadial $nTangent $nz)  simpleGrading ($gInner 1 1)   // 13


);

edges
(
    //inner cylinder
    arc  0  7   (#calc "$rInner* cos(degToRad($theta))" #calc "$rInner* sin(degToRad($theta))" $zmin)   // 1
    arc 21  28  (#calc "$rInner* cos(degToRad($theta))" #calc "$rInner* sin(degToRad($theta))" $zmax)

    arc 7   19  (#calc "-$rInner* cos(degToRad($theta))" #calc "$rInner* sin(degToRad($theta))" $zmin)  // 2
    arc 28  40   (#calc "-$rInner* cos(degToRad($theta))" #calc "$rInner* sin(degToRad($theta))" $zmax)

    arc 19  18  (#calc "-$rInner* cos(degToRad($theta))" #calc "-$rInner* sin(degToRad($theta))" $zmin) // 3
    arc 40  39  (#calc "-$rInner* cos(degToRad($theta))" #calc "-$rInner* sin(degToRad($theta))" $zmax)

    arc 18  0   (#calc "$rInner* cos(degToRad($theta))" #calc "-$rInner* sin(degToRad($theta))" $zmin)  // 4
    arc 39  21  (#calc "$rInner* cos(degToRad($theta))" #calc "-$rInner* sin(degToRad($theta))" $zmax)

    //outer cylinder
    arc 1   6   (#calc "$rOuter* cos(degToRad($theta))" #calc "$rOuter* sin(degToRad($theta))" $zmin)   // 5
    arc 22  27  (#calc "$rOuter* cos(degToRad($theta))" #calc "$rOuter* sin(degToRad($theta))" $zmax)

    arc 6   20  (#calc "-$rOuter* cos(degToRad($theta))" #calc "$rOuter* sin(degToRad($theta))" $zmin)  // 6
    arc 27  41  (#calc "-$rOuter* cos(degToRad($theta))" #calc "$rOuter* sin(degToRad($theta))" $zmax) 
    
    arc 20  17  (#calc "-$rOuter* cos(degToRad($theta))" #calc "-$rOuter* sin(degToRad($theta))" $zmin) // 7
    arc 41  38  (#calc "-$rOuter* cos(degToRad($theta))" #calc "-$rOuter* sin(degToRad($theta))" $zmax)

    arc 17  1   (#calc "$rOuter* cos(degToRad($theta))" #calc "-$rOuter* sin(degToRad($theta))" $zmin)  // 8
    arc 38  22  (#calc "$rOuter* cos(degToRad($theta))" #calc "-$rOuter* sin(degToRad($theta))" $zmax)

    // transition arcs
    arc 6   5   ($xTransArc $yTransArc $zmin)                                                           // 9 
    arc 27  26  ($xTransArc $yTransArc $zmax)

    arc 17  16  ($xTransArc #calc "-$yTransArc" $zmin)                                                  // 10
    arc 38  37  ($xTransArc #calc "-$yTransArc" $zmax)

    // inlet arcs
    arc 11 10   (#calc "-$rInlet* cos(degToRad($theta))" #calc "$rInlet* sin(degToRad($theta))" $zmin)      // 11
    arc 32 31   (#calc "-$rInlet* cos(degToRad($theta))" #calc "$rInlet* sin(degToRad($theta))" $zmax)

    arc 11 12   (#calc "-$rInlet* cos(degToRad($theta))" #calc "-$rInlet* sin(degToRad($theta))" $zmin)     // 12
    arc 32 33   (#calc "-$rInlet* cos(degToRad($theta))" #calc "-$rInlet* sin(degToRad($theta))" $zmax)



);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (11 10 31 32)
            (11 12 33 32)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (14 15 36 35)
            (15 3 24 36)
            (3 4 25 24)
            (4 8 29 25)
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
            (10 9 30 31)
            (9 8 29 30)

        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (12 13 34 33)
            (13 14 35 34)

        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (0 7 28 21)
            (7 19 40 28)
            (19 18 39 40)
            (18 0 21 39)
            
        );
    }
    
);

defaultPatch
    {

        type    empty;
        name    frontAndBack;
    }

mergePatchPairs
(
);


// ************************************************************************* //
